#!/bin/bash
# Creates a new ahab script in ~/bin and hardlinks it into the current
# directory.

new_script() {
cat <<'EOF'
#!/usr/bin/env perl
chomp($self{dockerfile} = <<'_');
FROM ubuntu:latest
RUN apt-get -qqy update
RUN apt-get -qqy install x11-utils
_
chomp($self{run} = <<'_');
#!/bin/bash
# This script runs the docker image built by the dockerfile.
# The image name is passed in as the environment variable $image.

# Generates docker run options to connect the container's X11 display to the
# host using the X11 socket.
x11_opts() {
  if [[ -n "$DISPLAY" ]]; then
    XAUTH=/tmp/.docker.xauth${DISPLAY//:/.}
    xauth nlist $DISPLAY | sed -e 's/^..../ffff/' | xauth -f $XAUTH nmerge -
    printf %s "-v /tmp/.X11-unix:/tmp/.X11-unix \
               -v $XAUTH:$XAUTH -e XAUTHORITY=$XAUTH \
               -e DISPLAY=$DISPLAY"
  fi
}

docker run $(x11_opts) --rm -it $image xmessage "TODO: find that whale"
_
eval($self{boot} = <<'_');
use strict;
use File::Temp qw/tempfile/;

our %self;
chomp $self{boot};
sub attribute_state {"chomp(\$self{$_[0]} = <<'__ahab');\n$self{$_[0]}\n__ahab"}
sub current_state {
  join "\n", "#!/usr/bin/env perl",
             map(attribute_state($_), qw/dockerfile run/),
             "eval(\$self{boot} = <<'_');\n$self{boot}\n_",
             'die $@';
}

sub rf($) {open my $fh, '<', $_[0] or die $!; join '', <$fh>}
sub wf($@) {open my $fh, '>', shift or die $!; print $fh join "\n", @_}

sub edit_self($) {
  my ($attr) = @_;
  my (undef, $f) = tempfile;
  wf $f, $self{$attr};
  system $ENV{VISUAL} || $ENV{EDITOR}, $f;
  $self{$attr} = rf $f;
  unlink $f;
  wf $0, current_state;
  0;
}

sub docker_build {
  open my $fh, "| docker build @_ -" or die $!;
  print $fh $self{dockerfile};
}

sub docker_run {
  $ENV{image} = `$0 --ahab-build -q`;
  exec '/bin/bash', '-c', $self{run}, @_ or die $!;
}

exit edit_self 'dockerfile'        if $ARGV[0] eq '--ahab-dockerfile';
exit edit_self 'run'               if $ARGV[0] eq '--ahab-run';
exit docker_build @ARGV[1..$#ARGV] if $ARGV[0] eq '--ahab-build';
exit docker_run @ARGV;
_
die $@;
EOF
}

case $1 in
new)
  if [[ -e ~/bin/$2 ]]; then
    echo "~/bin/$2 already exists; not overwriting it"
    exit 1
  fi
  if [[ -e $2 ]]; then
    echo "$2 already exists; not overwriting it"
    exit 1
  fi
  new_script > ~/bin/$2
  chmod +x ~/bin/$2
  ln ~/bin/$2 $2
  echo "created ~/bin/$2 (hardlinked to ./$2)"
  echo "  - '$2 --ahab-dockerfile' to edit the dockerfile"
  echo "  - '$2 --ahab-run' to edit the runtime script"
  echo "  - '$2 --ahab-build' to build the untagged docker image"
  echo "  - '$2 <anything else>' to launch the application in a transient container"
  echo
  ;;

*)
  echo "usage: ahab new <name>"
  exit 1
  ;;
esac
